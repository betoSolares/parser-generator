using System.IO;

namespace SolutionGenerator
{
    public class Properties
    {
        /// <summary>Write all the files for the properties</summary>
        /// <param name="name">The name of the solution</param>
        /// <param name="path">The path for the files</param>
        public void WriteFiles(string name, string path)
        {
            WriteAssemblyInfo(name, path);
            WriteResourcesDesigner(name, path);
            WriteResourcesResx(path);
            WriteSettings(path);
            WriteSettingsDesigner(name, path);
        }

        /// <summary>Write the assembly info file</summary>
        /// <param name="name">The name of the solution</param>
        /// <param name="path">The path for the solution</param>
        private void WriteAssemblyInfo(string name, string path)
        {
            string text = "using System.Reflection;\nusing System.Runtime.InteropServices;\n\n";
            text += "// General Information about an assembly is controlled through the following\n";
            text += "// set of attributes. Change these attribute values to modify the information\n";
            text += "// associated with an assembly.\n[assembly: AssemblyTitle(\"" + name + "\")]\n";
            text += "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n";
            text += "[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"" + name + "\")]\n";
            text += "[assembly: AssemblyCopyright(\"Copyright ©  2020\")]\n[assembly: AssemblyTrademark(\"\")]\n";
            text += "[assembly: AssemblyCulture(\"\")]\n\n";
            text += "// Setting ComVisible to false makes the types in this assembly not visible\n";
            text += "// to COM components.  If you need to access a type in this assembly from\n";
            text += "// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n";
            text += "// The following GUID is for the ID of the typelib if this project is exposed to COM\n";
            text += "[assembly: Guid(\"93e6f700-fd90-42f7-ac22-326fac929f8b\")]\n\n";
            text += "// Version information for an assembly consists of the following four values:\n//\n";
            text += "//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n";
            text += "// You can specify all the values or you can default the Build and Revision Numbers\n";
            text += "// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n";
            text += "[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n";
            File.WriteAllText(Path.Combine(path, "AssemblyInfo.cs"), text);
        }

        /// <summary>Write the resources designer file</summary>
        /// <param name="name">The name of the solution</param>
        /// <param name="path">The path for the solution</param>
        private void WriteResourcesDesigner(string name, string path)
        {
            string text = "//------------------------------------------------------------------------------\n";
            text += "// <auto-generated>\n//     This code was generated by a tool.\n";
            text += "//     Runtime Version:4.0.30319.42000\n//\n";
            text += "//     Changes to this file may cause incorrect behavior and will be lost if\n";
            text += "//     the code is regenerated.\n// </auto-generated>\n";
            text += "//------------------------------------------------------------------------------\n\n";
            text += "namespace " + name + ".Properties\n{\n\n\n\t/// <summary>\n\t";
            text += "///   A strongly-typed resource class, for looking up localized strings, etc.\n\t";
            text += "/// </summary>\n\t// This class was auto-generated by the StronglyTypedResourceBuilder\n\t";
            text += "// class via a tool like ResGen or Visual Studio.\n\t";
            text += "// To add or remove a member, edit your .ResX file then rerun ResGen\n\t";
            text += "// with the /str option, or rebuild your VS project.\n\t";
            text += "[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools";
            text += ".StronglyTypedResourceBuilder\", \"4.0.0.0\")]\n\t[global::System.Diagnostics.";
            text += "DebuggerNonUserCodeAttribute()]\n\t[global::System.Runtime.CompilerServices.";
            text += "CompilerGeneratedAttribute()]\n\tinternal class Resources\n\t{\n\n\t\tprivate static ";
            text += "global::System.Resources.ResourceManager resourceMan;\n\n\t\tprivate static ";
            text += "global::System.Globalization.CultureInfo resourceCulture;\n\n\t\t[global::System.Diagnostics";
            text += ".CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811: ";
            text += "AvoidUncalledPrivateCode\")]\n\t\tinternal Resources()\n\t\t{\n\t\t}\n\n\t/// <summary>\n";
            text += "\t\t///   Returns the cached ResourceManager instance used by this class.\n\t\t";
            text += "/// </summary>\n\t\t[global::System.ComponentModel.EditorBrowsableAttribute(global:";
            text += ":System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\tinternal static global::";
            text += "System.Resources.ResourceManager ResourceManager\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif ";
            text += "((resourceMan == null))\n\t\t\t\t{\n\t\t\t\t\tglobal::System.Resources.ResourceManager ";
            text += "temp = new global::System.Resources.ResourceManager(\"" + name + ".Properties.Resources\"";
            text += ", typeof(Resources).Assembly);\n\t\t\t\t\tresourceMan = temp;\n\t\t\t\t}\n\t\t\t\t";
            text += "return resourceMan;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>\n\t\t";
            text += "///   Overrides the current thread's CurrentUICulture property for all\n\t\t";
            text += "///   resource lookups using this strongly typed resource class.\n\t\t/// </summary>\n\t\t";
            text += "[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.";
            text += "EditorBrowsableState.Advanced)]\n\t\tinternal static global::System.Globalization.CultureInfo ";
            text += "Culture\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn resourceCulture;\n\t\t\t}\n\t\t\tset\n\t\t\t";
            text += "{\n\t\t\t\tresourceCulture = value;\n\t\t\t}\n\t\t}\n\t}\n}\n";
            File.WriteAllText(Path.Combine(path, "Resources.Designer.cs"), text);
        }

        /// <summary>Write the resources resx file</summary>
        /// <param name="path">The path for the solution</param>
        private void WriteResourcesResx(string path)
        {
            string text = @"<?xml version=""1.0"" encoding=""utf-8""?>
<root>
  <xsd:schema id=""root"" xmlns="""" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:msdata=""urn:schemas-microsoft-com:xml-msdata"">
    <xsd:element name=""root"" msdata:IsDataSet=""true"">
      <xsd:complexType>
        <xsd:choice maxOccurs=""unbounded"">
          <xsd:element name=""metadata"">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name=""value"" type=""xsd:string"" minOccurs=""0"" />
              </xsd:sequence>
              <xsd:attribute name=""name"" type=""xsd:string"" />
              <xsd:attribute name=""type"" type=""xsd:string"" />
              <xsd:attribute name=""mimetype"" type=""xsd:string"" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name=""assembly"">
            <xsd:complexType>
              <xsd:attribute name=""alias"" type=""xsd:string"" />
              <xsd:attribute name=""name"" type=""xsd:string"" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name=""data"">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name=""value"" type=""xsd:string"" minOccurs=""0"" msdata:Ordinal=""1"" />
                <xsd:element name=""comment"" type=""xsd:string"" minOccurs=""0"" msdata:Ordinal=""2"" />
              </xsd:sequence>
              <xsd:attribute name=""name"" type=""xsd:string"" msdata:Ordinal=""1"" />
              <xsd:attribute name=""type"" type=""xsd:string"" msdata:Ordinal=""3"" />
              <xsd:attribute name=""mimetype"" type=""xsd:string"" msdata:Ordinal=""4"" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name=""resheader"">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name=""value"" type=""xsd:string"" minOccurs=""0"" msdata:Ordinal=""1"" />
              </xsd:sequence>
              <xsd:attribute name=""name"" type=""xsd:string"" use=""required"" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name=""resmimetype"">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name=""version"">
    <value>2.0</value>
  </resheader>
  <resheader name=""reader"">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name=""writer"">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>";
            File.WriteAllText(Path.Combine(path, "Resources.resx"), text);
        }

        /// <summary>Write the settings file</summary>
        /// <param name="path">The path for the solution</param>
        private void WriteSettings(string path)
        {
            string text = @"<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns=""http://schemas.microsoft.com/VisualStudio/2004/01/settings"" CurrentProfile=""(Default)"">
  <Profiles>
    <Profile Name=""(Default)"" />
  </Profiles>
  <Settings />
</SettingsFile>";
            File.WriteAllText(Path.Combine(path, "Settings.settings"), text);
        }

        /// <summary>Write the settings designer file</summary>
        /// <param name="name">The name of the solution</param>
        /// <param name="path">The path for the solution</param>
        private void WriteSettingsDesigner(string name, string path)
        {
            string text = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace " + name + @".Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator"", ""11.0.0.0"")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}";
            File.WriteAllText(Path.Combine(path, "Settings.Designer.cs"), text);
        }
    }
}
